title: Identify User's Roles
stepnum: 1
ref: collect-roles
pre: |
  Use the :dbcommand:`usersInfo` command or :method:`db.getUser()` method to
  display user information. The :data:`~admin.system.users.roles` array
  specifies the user's roles.
action:
  - pre: |
      For example, to view roles for ``accountUser01`` on the
      ``accounts`` database, issue the following:
    code: |
      use accounts
      db.getUser("accountUser01")
    language: javascript
  - pre: |
      The :data:`~admin.system.users.roles` array displays all roles
      for ``accountUser01``:
    language: javascript
    code: |
      "roles" : [
         {
           "role" : "readWrite",
           "db" : "accounts"
         },
         {
           "role" : "siteRole01",
           "db" : "records"
          }
      ]
---
title: Identify the Privileges Granted by the Roles
ref: identify-privileges
stepnum: 2
pre: |
  For a given role, use the :dbcommand:`rolesInfo` command or
  :method:`db.getRole()` method, and include the ``showPrivileges`` parameter.
  The resulting role document displays the privileges granted directly and the
  roles from which this role inherits privileges.
action:
  - pre: |
      For example, to view the privileges granted by ``siteRole01``, use the
      following operation:
    language: javascript
    code: |
      use records
      db.getRole( "siteRole01", { showPrivileges: true } )
  - pre: |
      In the :data:`~admin.system.roles.roles` array, ``siteRole01`` inherits
      privileges from the ``corporate`` database's ``read`` role. In
      :data:`~admin.system.roles.privileges` array, ``siteRole01``
      grants the privilege to perform ``find``, ``insert``, and
      ``update`` actions on the ``records`` database.
    language: javascript
    code: |
         "roles" : [
            {
                "role" : "read",
                "db" : "corporate"
            }
         ],
         "privileges" : [
            {
                "resource" : {
                    "db" : "records",
                    "collection" : ""
                },
                "actions" : [
                    "find",
                    "insert",
                    "update"
                ]
            }
         ]
post: |
  To view the privileges granted by the :authrole:`read` role, use
  :method:`db.getRole()` again with the appropriate parameters.
---
title: Identify the Privileges to Grant or Revoke
stepnum: 3
ref: select-roles-to-modify
pre: |
  Determine which role contains the privileges *and only those privileges*.

  If such a role does not exist, then to grant the privileges will require
  :doc:`creating a new role </tutorial/define-roles>` with the specific
  set of privileges.

  To revoke a subset of privileges provided by an existing role: revoke
  the original role, :doc:`create a new role </tutorial/define-roles>`
  that contains the privileges *to keep*, and then grant that role to
  the user.
---
title: Modify User
stepnum: 4
ref: user-modification
action:
  - heading:  Revoke a Role
    pre: |
      Revoke a role using the :dbcommand:`revokeRolesFromUser` command. For
      example, to remove the :authrole:`readWrite` role on the ``accounts``
      database from the user ``accountUser01``, use an operation that
      resembles the following:
    language: javascript
    code: |
      use accounts
      db.runCommand( { revokeRolesFromUser: "accountUser01",
                       roles: [ { role: "readWrite", db: "accounts" } ]
                     } )
    post: |
      The :dbcommand:`revokeRolesToUser` command removes the
      :authrole:`readWrite` role on the ``accounts`` database from
      ``accountUser01``\ 's existing roles.
  - heading: Grant a Role
    pre: |
      Grant the role using the :dbcommand:`grantRolesToUser` command. For example,
      to grant the user ``accountUser01`` the :authrole:`read` role on
      the ``records`` database, use an operation that resembles the following:
    language: javascript
    code: |
         use accounts
         db.runCommand( { grantRolesToUser: "accountUser01",
                          roles: [ { role: "read", db: "records" } ]
                        } )
    post: |
      The :dbcommand:`grantRolesToUser` command adds the ``read`` role on the
      ``records`` database to ``accountUser01``\ 's existing roles.
...
